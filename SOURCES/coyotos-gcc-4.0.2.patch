diff -ruN baseline-gcc-4.0.2/config.sub gcc-4.0.2/config.sub
--- baseline-gcc-4.0.2/config.sub	2005-04-25 06:36:56.000000000 -0400
+++ gcc-4.0.2/config.sub	2005-10-06 03:10:33.000000000 -0400
@@ -1184,6 +1184,8 @@
 	      | -powermax* | -dnix* | -nx6 | -nx7 | -sei* | -dragonfly*)
 	# Remember, each alternative MUST END IN *, to match a version number.
 		;;
+	-coyotos*)
+		;;
 	-qnx*)
 		case $basic_machine in
 		    x86-* | i*86-*)
diff -ruN baseline-gcc-4.0.2/gcc/config/coyotos.h gcc-4.0.2/gcc/config/coyotos.h
--- baseline-gcc-4.0.2/gcc/config/coyotos.h	1969-12-31 19:00:00.000000000 -0500
+++ gcc-4.0.2/gcc/config/coyotos.h	2005-10-06 03:11:54.000000000 -0400
@@ -0,0 +1,34 @@
+/* Configuration common to all targets running RTEMS. 
+   Copyright (C) 2000, 2002, 2004 Free Software Foundation, Inc. 
+
+This file is part of GCC.
+
+GCC is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GCC is distributed in the hope that it will be useful,
+but WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GCC; see the file COPYING.  If not, write to
+the Free Software Foundation, 59 Temple Place - Suite 330,
+Boston, MA 02111-1307, USA.  */
+
+/* Specify predefined symbols in preprocessor.  */
+
+/* Some genious predefined this for m68k builds... */
+#ifdef TARGET_OS_CPP_BUILTINS
+#undef TARGET_OS_CPP_BUILTINS
+#endif
+
+#define TARGET_OS_CPP_BUILTINS()		\
+  do						\
+    {						\
+	builtin_define ("__coyotos__");		\
+	builtin_assert ("system=coyotos");	\
+    }						\
+  while (0)
diff -ruN baseline-gcc-4.0.2/gcc/config/i386/t-coyotos64 gcc-4.0.2/gcc/config/i386/t-coyotos64
--- baseline-gcc-4.0.2/gcc/config/i386/t-coyotos64	1969-12-31 19:00:00.000000000 -0500
+++ gcc-4.0.2/gcc/config/i386/t-coyotos64	2005-10-06 03:12:05.000000000 -0400
@@ -0,0 +1,20 @@
+# On x86-64 we do not need any exports for glibc for 64-bit libgcc_s,
+# override the settings
+# from t-slibgcc-elf-ver and t-linux
+SHLIB_MAPFILES = $(srcdir)/libgcc-std.ver \
+		 $(srcdir)/config/i386/libgcc-x86_64-glibc.ver
+
+MULTILIB_OPTIONS = m64/m32
+MULTILIB_DIRNAMES = 64 32 
+MULTILIB_OSDIRNAMES = ../lib64 ../lib
+
+LIBGCC = stmp-multilib
+INSTALL_LIBGCC = install-multilib
+
+EXTRA_MULTILIB_PARTS=crtbegin.o crtend.o # crtbeginS.o crtendS.o crtbeginT.o
+
+# The pushl in CTOR initialization interferes with frame pointer elimination.
+# crtend*.o cannot be compiled without -fno-asynchronous-unwind-tables,
+# because then __FRAME_END__ might not be the last thing in .eh_frame
+# section.
+CRTSTUFF_T_CFLAGS = -fno-omit-frame-pointer -fno-asynchronous-unwind-tables
diff -ruN baseline-gcc-4.0.2/gcc/config.build gcc-4.0.2/gcc/config.build
--- baseline-gcc-4.0.2/gcc/config.build	2003-10-01 19:51:09.000000000 -0400
+++ gcc-4.0.2/gcc/config.build	2005-10-06 03:12:55.000000000 -0400
@@ -89,6 +89,10 @@
     # 80386 running SCO Open Server 5
     build_install_headers_dir=install-headers-cpio
     ;;
+  i[34567]86-*-coyotos*) 
+    # 80386 running Coyotos
+    build_install_headers_dir=install-headers-cpio
+    ;;
   i[34567]86-sequent-ptx4* | i[34567]86-sequent-sysv4* )
     build_xm_defines="SMALL_ARG_MAX"
     build_install_headers_dir=install-headers-cpio
diff -ruN baseline-gcc-4.0.2/gcc/config.gcc gcc-4.0.2/gcc/config.gcc
--- baseline-gcc-4.0.2/gcc/config.gcc	2005-08-09 06:57:04.000000000 -0400
+++ gcc-4.0.2/gcc/config.gcc	2005-10-06 03:15:54.000000000 -0400
@@ -935,6 +935,23 @@
 	esac
 	use_collect2=yes
 	;;
+i[34567]86-*-coyotos*)
+	tm_file="${tm_file} i386/unix.h i386/att.h dbxelf.h elfos.h i386/i386elf.h coyotos.h"
+	extra_parts="crti.o crtn.o"
+	tmake_file="i386/t-i386elf t-svr4"
+	use_fixproto=yes
+	;;
+m68k-*-coyotos*)
+	tm_file="m68k/m68k.h m68k/m68k-none.h m68k/m68kelf.h dbxelf.h elfos.h m68k/m68kemb.h m68k/m68020-elf.h coyotos.h"
+	tmake_file=m68k/t-m68kelf
+	tm_defines="MOTOROLA USE_GAS"
+	use_fixproto=yes
+	;;
+x86_64-*-coyotos*)
+	tm_file="${tm_file} i386/unix.h i386/att.h dbxelf.h elfos.h i386/x86_64.h coyotos.h"
+	tmake_file="${tmake_file} i386/t-coyotos64"
+	use_fixproto=yes
+	;;
 i[34567]86-*-darwin*)
 	tm_file="${tm_file} i386/darwin.h"
 	;;
