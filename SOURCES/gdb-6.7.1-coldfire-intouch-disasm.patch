diff -ruN baseline-gdb-6.7.1/opcodes/m68k-opc.c gdb-6.7.1/opcodes/m68k-opc.c
--- baseline-gdb-6.7.1/opcodes/m68k-opc.c	2007-07-05 05:49:02.000000000 -0400
+++ gdb-6.7.1/opcodes/m68k-opc.c	2007-12-18 12:58:00.000000000 -0500
@@ -249,9 +249,25 @@
 {"cinvp", 2,	one(0xf400|SCOPE_PAGE), one(0xff38), "ceas", m68040up },
 
 {"cpusha", 2,	one(0xf420|SCOPE_ALL),  one(0xff38), "ce",   m68040up },
-{"cpushl", 2,	one(0xf420|SCOPE_LINE), one(0xff38), "ceas", m68040up | mcfisa_a },
+/* Need to break CPUSHL into two entries, because 0xf428 is INTOUCH on
+   Coldfire. The bit pattern of CPUSHL is 1111 0100 cc10 1aaa where
+   'cc' indicates which cache to flush and 'aaa' is an address
+   register selector. A cc value of 0 is RESERVED (invalid).
+
+   The bit pattern of INTOUCH is 1111 0100 0010 1aaa where 'aaa' is an
+   address register. The only reason this does not collide with CPUSHL
+   is because cc=00 is reserved. The old patterns here did not match
+   that correctly.
+
+   On 68000RM, however, the case where cc=0 is specified as a NO-OP,
+   so we need to split the opcode here. */
+
+{"cpushl", 2,	one(0xf420|SCOPE_LINE), one(0xff38), "ceas", m68040up },
+{"cpushl", 2,	one(0xf460|SCOPE_LINE), one(0xfff8), "ceas", mcfisa_a },
+{"cpushl", 2,	one(0xf4a0|SCOPE_LINE), one(0xffb8), "ceas", mcfisa_a },
 {"cpushp", 2,	one(0xf420|SCOPE_PAGE), one(0xff38), "ceas", m68040up },
 
+
 #undef SCOPE_LINE
 #undef SCOPE_PAGE
 #undef SCOPE_ALL
