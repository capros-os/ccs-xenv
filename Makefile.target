THISMAKEFILE := $(word $(words $(MAKEFILE_LIST)),$(MAKEFILE_LIST))

##################################################################
#
#  A bunch of important variables are defined in Makefile.vars
#
##################################################################
include Makefile.vars

default: build

CROSSTARGET=$(CROSSARCH)-unknown-$(CROSSOS)
CROSSHOSTROOT=$(CROSSROOT)/host
CROSSSYSROOT=$(CROSSROOT)/sysroot-$(CROSSARCH)

##################################################################
#
#  Tool Versions.
#
##################################################################
BINUTILS_VERSION=2.20.1
BINUTILS_PATCHES=$(wildcard SOURCES/binutils-$(BINUTILS_VERSION)*.patch)

GCC_VERSION=4.2.4
GCC_PATCHES=$(wildcard SOURCES/gcc-$(GCC_VERSION)*.patch)

NEWLIB_VERSION=1.18.0
NEWLIB_CVS_PATCH=newlib-cvs20100601.patch.bz2
NEWLIB_PATCHES=$(wildcard SOURCES/newlib-$(NEWLIB_VERSION)*.patch)

CRTFILES_VERSION=0.1.0

GDB_VERSION=7.0.1
GDB_PATCHES=$(wildcard SOURCES/gdb-$(GDB_VERSION)*.patch)

##################################################################
#
#  CONFIGDIRS: Directories to override for configure.
#
##################################################################

# FIX: This will probably require adjustment for share/man, share/info
CONFIGDIRS=\
    --prefix=$(CROSSHOSTROOT) \
    --mandir=$(CROSSHOSTROOT)/share/man \
    --infodir=$(CROSSHOSTROOT)/share/info

##################################################################
#
#  FSDIRS:     Directories to pre-install.
#
#              The FSDIRS part should match the list in 
#              SPECS/capos-common-filesystem.spec.
#
#              The SYSFSDIRS part should match the list in 
#              SPECS/capos-sysroot-filesystem.spec.
#
##################################################################
FSDIRS=\
    $(CROSSROOT) \
    $(CROSSHOSTROOT) \
    $(CROSSHOSTROOT)/bin \
    $(CROSSHOSTROOT)/lib \
    $(CROSSHOSTROOT)/include \
    $(CROSSHOSTROOT)/share \
    $(CROSSHOSTROOT)/share/locale \
    $(CROSSHOSTROOT)/share/man \
    $(CROSSHOSTROOT)/share/info \

SYSFSDIRS=\
    $(CROSSSYSROOT) \
    $(CROSSSYSROOT)/usr \
    $(CROSSSYSROOT)/usr/include \
    $(CROSSSYSROOT)/usr/lib



##################################################################
#
# GETTING THE SOURCES UNCREATED
#
##################################################################

# Create the BUILD subdirectory, as needed:
BUILD:
	mkdir BUILD

# unpack binutils, apply patches
BUILD/binutils-$(BINUTILS_VERSION): | BUILD
	@echo "Unpacking binutils-$(BINUTILS_VERSION)"
	(cd BUILD; tar xjf ../SOURCES/binutils-$(BINUTILS_VERSION).tar.bz2)
	(cd BUILD; patch -p0 < ../SOURCES/capos-binutils-$(BINUTILS_VERSION).patch)
	if [ "" != "$(BINUTILS_PATCHES)" ]; then \
	for patch in $(BINUTILS_PATCHES); do \
	  (cd BUILD; patch -p0 < ../$${patch}); \
	done;\
	fi

# unpack newlib, apply patches
BUILD/newlib-$(NEWLIB_VERSION): | BUILD
	@echo "Unpacking newlib-$(NEWLIB_VERSION)"
	(cd BUILD; tar xjf ../SOURCES/newlib-$(NEWLIB_VERSION).tar.bz2)
	(cd BUILD; bzcat ../SOURCES/$(NEWLIB_CVS_PATCH) | patch -p0)
	(cd BUILD; patch -p0 < ../SOURCES/capos-newlib-$(NEWLIB_VERSION).patch)
	if [ "" != "$(NEWLIB_PATCHES)" ]; then \
	for patch in $(NEWLIB_PATCHES); do \
	  (cd BUILD; patch -p0 < ../$${patch}); \
	done;\
	fi

# unpack gcc, apply patches
BUILD/gcc-$(GCC_VERSION): | BUILD
	@echo "Unpacking gcc-$(GCC_VERSION)"
	(cd BUILD; tar xjf ../SOURCES/gcc-core-$(GCC_VERSION).tar.bz2)
	(cd BUILD; tar xjf ../SOURCES/gcc-g++-$(GCC_VERSION).tar.bz2)
	(cd BUILD; patch -p0 < ../SOURCES/capos-gcc-$(GCC_VERSION).patch)
	if [ "" != "$(GCC_PATCHES)" ]; then \
	for patch in $(GCC_PATCHES); do \
	  (cd BUILD; patch -p0 < ../$${patch}); \
	done; \
	fi

# unpack gdb, apply patches
BUILD/gdb-$(GDB_VERSION): | BUILD
	@echo "Unpacking gdb-$(GDB_VERSION)"
	(cd BUILD; tar xjf ../SOURCES/gdb-$(GDB_VERSION).tar.bz2)
	(cd BUILD; patch -p0 < ../SOURCES/capos-gdb-$(GDB_VERSION).patch)
	if [ "" != "$(GDB_PATCHES)" ]; then \
	for patch in $(GDB_PATCHES); do \
	  (cd BUILD; patch -p0 < ../$${patch}); \
	done; \
	fi

# unpack gcc, apply patches
BUILD/crtfiles-$(CRTFILES_VERSION): | BUILD
	@echo "Unpacking crtfiles-$(CRTFILES_VERSION)"
	(cd BUILD; tar xjf ../SOURCES/crtfiles-$(CRTFILES_VERSION).tar.bz2)

##################################################################
#
# FS PRE-INSTALL
#
# Get the per-target installation directories in place
#
##################################################################
filesystem:
	echo $(CROSSROOT)
	echo $(BUILDTARGET)
	@for d in $(FSDIRS); do \
	  if [ ! -d $$d ]; then \
	    echo install -m 755 -d $$d; \
	    install -m 755 -d $$d; \
	  fi; \
	done
	@for d in $(SYSFSDIRS); do \
	  if [ ! -d $$d ]; then \
	    echo install -m 755 -d $$d; \
	    install -m 755 -d $$d; \
	  fi; \
	done

##################################################################
#
# BINUTILS
#
# Get the per-target binutils built and installed
#
##################################################################
binutils: filesystem
binutils: | BUILD/binutils-$(BINUTILS_VERSION)
binutils:
	rm -rf BUILD/build-binutils-$(CROSSARCH)	
	mkdir BUILD/build-binutils-$(CROSSARCH)
	(cd BUILD/build-binutils-$(CROSSARCH); \
	  CC="${CCACHE} gcc" ../binutils-$(BINUTILS_VERSION)/configure \
	     ${CONFIGDIRS} \
	     --with-sysroot=$(CROSSSYSROOT) \
	     --target ${CROSSTARGET})
	$(MAKE) -C BUILD/build-binutils-$(CROSSARCH) tooldir=$(CROSSHOSTROOT) all
	$(MAKE) -C BUILD/build-binutils-$(CROSSARCH) install

##################################################################
#
# GDB
#
# Get the per-target gdb built and installed
#
##################################################################
gdb: filesystem
gdb: | BUILD/gdb-$(GDB_VERSION)
gdb:
	rm -rf BUILD/build-gdb-$(CROSSARCH)	
	mkdir BUILD/build-gdb-$(CROSSARCH)
	(cd BUILD/build-gdb-$(CROSSARCH); \
	  CC="${CCACHE} gcc" ../gdb-$(GDB_VERSION)/configure \
	     ${CONFIGDIRS} \
	     --with-sysroot=$(CROSSSYSROOT) \
	     --target ${CROSSTARGET})
	$(MAKE) -C BUILD/build-gdb-$(CROSSARCH) tooldir=$(CROSSHOSTROOT) all
	#$(MAKE) -C BUILD/build-gdb-$(CROSSARCH) install

##################################################################
#
# PREGCC
#
# Get the per-target pregcc built and installed
#
##################################################################
pregcc: | BUILD/gcc-$(GCC_VERSION)
pregcc:
	rm -rf BUILD/build-gcc-$(CROSSARCH)	
	mkdir BUILD/build-gcc-$(CROSSARCH)
	(cd BUILD/build-gcc-$(CROSSARCH); \
	  PATH=$(CROSSHOSTROOT)/bin:$(PATH) CC="$(CCACHE) gcc" \
	    ../gcc-$(GCC_VERSION)/configure \
	      $(CONFIGDIRS) \
	      --with-local-prefix=$(CROSSSYSROOT) \
	      --without-headers \
	      --with-newlib \
	      --with-sysroot=$(CROSSSYSROOT) \
	      --disable-libmudflap \
	      --enable-languages=c \
	      --target $(CROSSTARGET))
	PATH=$(CROSSHOSTROOT)/bin:$(PATH) \
	  $(MAKE) -C BUILD/build-gcc-$(CROSSARCH) \
	    gcc_tooldir=$(CROSSHOSTROOT) all-gcc
	PATH=$(CROSSHOSTROOT)/bin:$(PATH) \
	  $(MAKE) -C BUILD/build-gcc-$(CROSSARCH) \
	    gcc_tooldir=$(CROSSHOSTROOT) install-gcc
	rm -f $(CROSSHOSTROOT)/lib/gcc/$(CROSSTARGET)/$(GCC_VERSION)/crti.o
	rm -f $(CROSSHOSTROOT)/lib/gcc/$(CROSSTARGET)/$(GCC_VERSION)/crtn.o
	rm -f $(CROSSHOSTROOT)/lib/gcc/$(CROSSTARGET)/$(GCC_VERSION)/thumb/crti.o
	rm -f $(CROSSHOSTROOT)/lib/gcc/$(CROSSTARGET)/$(GCC_VERSION)/thumb/crtn.o

##################################################################
#
# NEWLIB
#
# Get the per-target newlib built and installed
#
##################################################################
newlib: | BUILD/newlib-$(NEWLIB_VERSION)
newlib:
	rm -rf BUILD/build-newlib-$(CROSSARCH)	
	mkdir BUILD/build-newlib-$(CROSSARCH)
	(cd BUILD/build-newlib-$(CROSSARCH); \
	  PATH=$(CROSSHOSTROOT)/bin:$(PATH) \
	    ../newlib-$(NEWLIB_VERSION)/configure \
	      $(CONFIGDIRS) \
	      --with-local-prefix=$(CROSSSYSROOT) \
	      --target $(CROSSTARGET))
	PATH=$(CROSSHOSTROOT)/bin:$(PATH) \
	  $(MAKE) -C BUILD/build-newlib-$(CROSSARCH) \
	    tooldir=$(CROSSSYSROOT)/usr STAGE_CC_WRAPPER="$(CCACHE)" all
	PATH=$(CROSSHOSTROOT)/bin:$(PATH) \
	  $(MAKE) -C BUILD/build-newlib-$(CROSSARCH) \
	    tooldir=$(CROSSSYSROOT)/usr STAGE_CC_WRAPPER="$(CCACHE)" install

##################################################################
#
# GCC
#
# Get the per-target gcc built and installed
#
##################################################################
gcc: | BUILD/gcc-$(GCC_VERSION)
gcc:
	rm -rf BUILD/build-gcc-$(CROSSARCH)	
	mkdir BUILD/build-gcc-$(CROSSARCH)
	(cd BUILD/build-gcc-$(CROSSARCH); \
	  PATH=$(CROSSHOSTROOT)/bin:$(PATH) CC="$(CCACHE) gcc" \
	    ../gcc-$(GCC_VERSION)/configure \
	      $(CONFIGDIRS) \
	      --with-local-prefix=$(CROSSSYSROOT) \
	      --with-newlib \
	      --with-sysroot=$(CROSSSYSROOT) \
	      --with-headers=$(CROSSSYSROOT)/usr/include \
	      --disable-libmudflap \
	      --enable-languages="c,c++" \
	      --target $(CROSSTARGET))
	PATH=$(CROSSHOSTROOT)/bin:$(PATH) \
	  $(MAKE) -C BUILD/build-gcc-$(CROSSARCH) \
	    gcc_tooldir=$(CROSSHOSTROOT) all-gcc all-target-libstdc++-v3
	PATH=$(CROSSHOSTROOT)/bin:$(PATH) \
	  $(MAKE) -C BUILD/build-gcc-$(CROSSARCH) \
	    gcc_tooldir=$(CROSSHOSTROOT) install-gcc install-target-libstdc++-v3
	rm -f $(CROSSHOSTROOT)/lib/gcc/$(CROSSTARGET)/$(GCC_VERSION)/crti.o
	rm -f $(CROSSHOSTROOT)/lib/gcc/$(CROSSTARGET)/$(GCC_VERSION)/crtn.o
	rm -f $(CROSSHOSTROOT)/lib/gcc/$(CROSSTARGET)/$(GCC_VERSION)/thumb/crti.o
	rm -f $(CROSSHOSTROOT)/lib/gcc/$(CROSSTARGET)/$(GCC_VERSION)/thumb/crtn.o

gcc-links:
	@for tool in ld nm strip; do \
	  echo ln -s ../../../../bin/$(CROSSTARGET)-$${tool} $(CROSSHOSTROOT)/libexec/gcc/$(CROSSTARGET)/$(GCC_VERSION)/$${tool}; \
	  ln -s ../../../../bin/$(CROSSTARGET)-$${tool} $(CROSSHOSTROOT)/libexec/gcc/$(CROSSTARGET)/$(GCC_VERSION)/$${tool}; \
	done


##################################################################
#
# C RUNTIME STUFF
#
# Our own additions
#
##################################################################
crtfiles: | BUILD/crtfiles-$(CRTFILES_VERSION)
crtfiles:
	rm -rf BUILD/build-crtfiles-$(CROSSARCH)
	mkdir BUILD/build-crtfiles-$(CROSSARCH)
	(cd BUILD/build-crtfiles-$(CROSSARCH); \
	  PATH=$(CROSSHOSTROOT)/bin:$(PATH) \
	    ../crtfiles-$(CRTFILES_VERSION)/configure \
	      --host $(CROSSTARGET) \
	      --target $(CROSSTARGET) \
	      --with-sysroot=$(CROSSSYSROOT))
	PATH=$(CROSSHOSTROOT)/bin:$(PATH) \
	  $(MAKE) -C BUILD/build-crtfiles-$(CROSSARCH) all
	PATH=$(CROSSHOSTROOT)/bin:$(PATH) \
	  $(MAKE) -C BUILD/build-crtfiles-$(CROSSARCH) install


##################################################################
#
# COYTOOLS
#
# Our own additions
#
##################################################################
.PHONY: coytools

coytools:
	(cd coytools; ./configure $(CONFIGDIRS))
	$(MAKE) -C coytools install

build:
	$(MAKE) -f $(THISMAKEFILE) filesystem
	$(MAKE) -f $(THISMAKEFILE) binutils
	$(MAKE) -f $(THISMAKEFILE) pregcc
	$(MAKE) -f $(THISMAKEFILE) newlib
	$(MAKE) -f $(THISMAKEFILE) gcc
	$(MAKE) -f $(THISMAKEFILE) gcc-links
	$(MAKE) -f $(THISMAKEFILE) crtfiles
	$(MAKE) -f $(THISMAKEFILE) coytools

clean:
	-rm -rf BUILD
